{
  "name": "Leap-three-camera-controls",
  "tagline": "Camera Controls for Three.js using Leap Motion",
  "body": "Three.js Camera Controls using Leap Motion\r\n=====\r\n\r\nHey Friends!\r\n\r\nI hope you are here to use the Leap.js / Three.js Camera controls. \r\nIf you aren't, the following might not make since, but since you are here,\r\nyou should try using them anyway!\r\n\r\nThis Repo is most definitly still a work in progress, so if you see any \r\nerrors, have any questions, think all the controls are horrendous, think the\r\ncode is ugly, have your own controls that are way better than all of these,\r\nPLEASE, PLEASE, PLEASE let me know at icohen@leapmotion.com || @cabbibo .\r\n\r\nThe Realm we have entered with gesture controlled devices is a wild frontier,\r\nan unexplored landscape. We will make mistakes, and the more we know about these \r\nmistakes, the better we can survive in this new magical space. So let me know \r\nyour opinions, my fellow Motion Pioneers!\r\n\r\nWhats in this Readme?\r\n-----\r\n\r\n  - Links to Useful Resources\r\n  - Basic Implementation\r\n  - A full example from start to finish!\r\n  - Further explanations of each individual camera controls\r\n  - How you can help!\r\n\r\nUseful Resources\r\n=====\r\n\r\n\r\n- [ The github page for this repo ]( http://leapmotion.github.io/Leap-Three-Camera-Controls/ )\r\n- [ three.js library ]( http://threejs.org/ )\r\n- [ Example of three.js Camera Control ]( http://threejs.org/examples/#misc_controls_trackball )\r\n- [ TODO: Really Pretty Tech Demo of Nvidias Open Source Driver Call Graph ]()\r\n\r\n\r\nBasic Implementation\r\n=====\r\n\r\nLike Any other javascript program, the first thing we need to \r\ndo is include the proper files. In our case we use three.js\r\nleap.js and which ever camera control we decide to use \r\n( For our demo use case, we will use 'LeapSpringControls.js\", so we\r\nstart of our program like so:\r\n\r\nInclude Scripts\r\n------\r\n\r\n```\r\n<script src=\"path/to/three.js\"></script>\r\n<script src=\"path/to/leap.js\"></script>\r\n<script src=\"path/to/LeapSpringControls.js\"></script>\r\n```\r\n\r\nThe next thing we will do is set up our controls. We are going to \r\nskip over all of the three.js initialization, but if you want, you can\r\njust grab that from the next section.\r\n\r\nWhichever camera controls we use, we initialize them the same way we would\r\na three.js camera control. The only difference is that instead of just\r\npassing through which camera we want the controls to apply to, in this case\r\nwe also need to tell the camera controls which leap controller we want to use.\r\n\r\nIf this seems convoluted, I promise its only because I suck at the English \r\nlanguage. Lets talk in javascript instead:\r\n\r\n\r\nInitializing Controls\r\n-----\r\n\r\n```\r\n// our leap controller\r\nvar controller;\r\n\r\n// our leap camera controls\r\nvar controls;\r\n\r\n// our three.js variables\r\nvar scene , camera;\r\n\r\n\r\n// Whatever function you use to initialize \r\n// your three.js scene, add your code here\r\nfunction init(){\r\n  \r\n\r\n  // Three.js initialization\r\n  var scene = new THREE.Scene();\r\n  var camera = new THREE.PerspectiveCamera( \r\n    50 ,\r\n    window.innerWidth / window.innerHeight,\r\n    1,\r\n    1000\r\n  );\r\n\r\n  // Our Leap Controller\r\n  var controller = new Leap.controller();\r\n  controller.connect();\r\n \r\n  // The long awaited camera controls!\r\n  var controls = new THREE.LeapSpringControls( camera , controller , scene );\r\n\r\n}\r\n```\r\n\r\nIt is important to note that the LeapSpringControls take in a camera , a controller ,\r\nAND a scene as input. This is because this specific control places a marker on the page\r\nas a helper.\r\n\r\nThe last thing we need to do is to make sure the controls are constantly being updated,\r\nso we include a few more lines in whatever function we are using to render the three.js\r\nscene.\r\n\r\nUpdating Controls\r\n-----\r\n\r\n```\r\nfunction animate(){\r\n\r\n  //THREE.js rendering goes here\r\n  \r\n\r\n  // This is the only thing we need!\r\n  controls.update();\r\n\r\n\r\n  // Make sure animate gets called again\r\n  requestAnimationFrame( animate );\r\n\r\n\r\n}\r\n```\r\n\r\nIf any of this doesn't make sense, check out the full example below. Also email\r\nicohen@leapmotion.com || @cabbibo with any questions / comments!\r\n\r\n\r\nFull Code Example\r\n=====\r\n\r\n```\r\n<html>\r\n  <head>\r\n    <style>\r\n\r\n      #container{\r\n\r\n        background:#000;\r\n        position:absolute;\r\n        top:0px;\r\n        left:0px;\r\n\r\n      }\r\n\r\n    </style>\r\n  </head>\r\n  <body>    \r\n\r\n    <div id=\"container\"></div>\r\n\r\n    <script src=\"../lib/leap.min.js\"></script>\r\n    <script src=\"../lib/three.js\"></script>\r\n\r\n    <script src=\"../controls/LeapSpringControls.js\"></script>\r\n    \r\n    <script>\r\n\r\n      var container , camera , scener, renderer , stats;\r\n\r\n      var controller , controls;\r\n\r\n      init();\r\n      animate();\r\n\r\n      function init(){\r\n\r\n        controller = new Leap.Controller();\r\n     \r\n        scene = new THREE.Scene();\r\n\r\n        camera = new THREE.PerspectiveCamera(\r\n          50 ,\r\n          window.innerWidth / window.innerHeight,\r\n          1 ,\r\n          5000\r\n        );\r\n\r\n        camera.position.z = 100;\r\n        controls = new THREE.LeapSpringControls( camera , controller , scene );\r\n\r\n        var material = new THREE.MeshNormalMaterial();\r\n        var geometry = new THREE.CubeGeometry( 20 , 20 , 20 );\r\n        for( var i = 0; i < 100; i ++ ){\r\n\r\n          var mesh = new THREE.Mesh( geometry , material );\r\n          mesh.position.x = ( Math.random() - .5 ) * 500;\r\n          mesh.position.y = ( Math.random() - .5 ) * 500;\r\n          mesh.position.z = ( Math.random() - .5 ) * 500;\r\n\r\n          mesh.rotation.x = Math.random() * Math.PI;\r\n          mesh.rotation.y = Math.random() * Math.PI;\r\n          mesh.rotation.z = Math.random() * Math.PI;\r\n\r\n          scene.add( mesh );\r\n\r\n        }\r\n        \r\n        container = document.getElementById( 'container' );\r\n        renderer = new THREE.WebGLRenderer();\r\n        renderer.setSize( window.innerWidth, window.innerHeight );\r\n        container.appendChild( renderer.domElement );      \r\n\r\n        controller.connect();\r\n\r\n\r\n      }\r\n\r\n\r\n      function animate(){\r\n\r\n        controls.update();\r\n        renderer.render( scene , camera );\r\n\r\n        requestAnimationFrame( animate );\r\n\r\n      }\r\n\r\n    </script>\r\n  </body>\r\n</html>\r\n```\r\n\r\nMore Information About Controls\r\n=====\r\n\r\nThis section is about what each of the controls are the most useful\r\nfor. It will also try to include descriptions of what works, what\r\ndoesn't work, and what will hopefully one day work.\r\n\r\nPointer Controls\r\n-----\r\n\r\nThe pointer controls basically has the camera always pointing at a \r\n'target', when you pinch, you begin moving the camera around the object,\r\nand when you release, the camera will stop moving.\r\n\r\nPros:\r\n\r\n  - Always looking at the same place, so its hard to get out of control\r\n  - movements feel smoothish\r\n  - Absolute positioning means that when comparing to the leap, \r\n    the position will always make sense\r\n\r\nCons:\r\n\r\n  - Moving camera near poles results in some weirdness\r\n  - Because there is only a single target, hard to move around scene\r\n    unless the target is dynamically updated\r\n  - Uses pinch, which removes the ability to use it for other gestures\r\n\r\n\r\nPairings:\r\n  \r\n  - Pointer controls work well with a single examined object\r\n  - 3D Modeling camera controls\r\n  - A Game with a single scene that we are always looking at\r\n  - A quick addition to visual experiments\r\n\r\nCalled using: \r\n\r\n```\r\n<!-- Include Script -->\r\n<script src=\"path/to/controls/LeapPointerControls.js\"></script>\r\n\r\n// Inside Init Function\r\nvar controls = THREE.LeapPointerControls( camera , controller );\r\n\r\ncontrols.size       = 100;\r\ncontrols.speed      = .01;\r\ncontrols.dampening  = .99;\r\ncontrols.target     = new THREE.Vector3( 0 , 100 , 0 );\r\n\r\n// Inside Animate Function\r\ncontrols.update();\r\n```\r\n\r\nUsing the following parameters:\r\n\r\n  - size:       Tells us how big the motions will be, basically the spherical\r\n                distance from the target\r\n\r\n  - dampening:  Tells us how fast the camera will slow down once we release\r\n                it. also how 'smoothed' the movement will be\r\n\r\n  - speed:      Tells us how fast the camera will follow our hand movements.\r\n                This number should be between 0 and 1\r\n\r\n  - target:     Tells us where the camera is looking. A THREE.Vector3(), \r\n                target basically defines the center of the scene\r\n\r\n\r\nEye Look Controls\r\n-----\r\n\r\nEye Look Controls are very similar to the Pointer controls. Infact when \r\nyou use your right hand, they are exactly the same. The biggest difference\r\nis that when you use your left hand, you dynamically move the target.\r\nThis leads to the ability to easily move around a scene, but always have a \r\nspecific point you are focused on. Also, all movements are relative,\r\nrather than absolute.\r\n\r\n\r\nPros:\r\n\r\n  - Always looking at the same place, so its hard to get out of control\r\n  - movements feel smoothish\r\n  - Relative movements allow for the exploration of the entire scene \r\n\r\nCons:\r\n\r\n  - Moving camera near poles results in some weirdness\r\n  - Uses pinch, which removes the ability to use it for other gestures\r\n  - Relative movement means that you can get very far away from yourr\r\n    target, leading to depth being difficult to judge\r\n  - Difficult to move through an entire scene quickly\r\n\r\n\r\nPairings:\r\n  \r\n  - Slowly examining a full scene\r\n  - 3D Modeling camera controls\r\n  - A quick addition to visual experiments\r\n\r\n\r\nCalled using: \r\n\r\n```\r\n<!-- Include Script -->\r\n<script src=\"path/to/controls/LeapEyeLookControls.js\"></script>\r\n\r\n// Inside Init Function\r\nvar controls = THREE.LeapEyeLookControls( camera , controller , scene );\r\n\r\ncontrols.lookSize       = 10;\r\ncontrols.lookMass       = 10;\r\ncontrols.lookSpeed      = 10;\r\ncontrols.lookDampening  = .9;\r\n\r\ncontrols.eyeSize        = 10;\r\ncontrols.eyeMass        = 10;\r\ncontrols.eyeSpeed       = 10;\r\ncontrols.eyeDampening   = .9;\r\n\r\n// If you want to have a marker for your eye\r\n// Which you probably do...\r\n\r\nvar geo   = new THREE.CubeGeometry( 1 , 1 , 1 );\r\nvar mat   = new THREE.MeshNormalMaterial();\r\nvar mesh  = new THREE.Mesh( geo , mat );\r\n\r\ncontrols.addLookMarker( mesh );\r\n\r\n// Inside Animate Function\r\ncontrols.update();\r\n```\r\n\r\nUsing the following parameters:\r\n\r\n  - lookSize:       Tells us how big the movements will be for the look object\r\n                    by adding bigger or smaller numbers to the force\r\n\r\n  - lookMass:       Tells us more about how the look object will move by giving\r\n                    it different mass. A smaller mass with fling around the field\r\n                    while a larger mass will be slower / harder to move\r\n\r\n  - lookSpeed:      Tells us how much the speed will be multiplied by when we \r\n                    determine the final speed to be added to the position\r\n\r\n  - lookDampening:  Tells us how quickly the look object will slow down\r\n\r\n  - eyeSize:        Tells us how big the movements will be for the eye object\r\n                    by adding bigger or smaller numbers to the force\r\n\r\n  - eyeMass:        Tells us more about how the eye object will move by giving\r\n                    it different mass. A smaller mass with fling around the field\r\n                    while a larger mass will be slower / harder to move\r\n\r\n  - eyeSpeed:       Tells us how much the speed will be multiplied by when we \r\n                    determine the final speed to be added to the position\r\n\r\n  - eyeDampening:   Tells us how quickly the eye object will slow down\r\n\r\n\r\nSpring Controls\r\n-----\r\n\r\nSpring controls Attatch a spring from your camera to a target, which it\r\nis always looking at. When you pinch, it places a new anchor that the \r\ntarget will tween to, always giving you a smooth movement. To see exactly\r\nwhat this means, try adding markers to the anchor , hand , and target\r\nas described in the below code snippet\r\n\r\nPros:\r\n\r\n  - Smooth like butter\r\n  - Lets you fly to anywhere you want in the scene with relative ease\r\n  - Once you let go, gives slowly brings you to a final resting point\r\n  \r\n\r\nCons:\r\n\r\n  - Moving camera near poles results in some weirdness...\r\n  - Uses pinch, which removes the ability to use it for other gestures\r\n  - Easy to get lost in space if you have no reference points\r\n\r\nPairings:\r\n  \r\n  - Space Flying Games \r\n  - Plane Flying Games\r\n  - A quick addition to visual experiments\r\n\r\n\r\nCalled using: \r\n\r\n```\r\n<!-- Include Script -->\r\n<script src=\"path/to/controls/LeapEyeLookControls.js\"></script>\r\n\r\n// Inside Init Function\r\ncontrols = new THREE.LeapSpringControls( camera , controller , scene );\r\n\r\ncontrols.dampening      = .75;\r\ncontrols.size           = 120;\r\ncontrols.springConstant =   1;\r\ncontrols.mass           = 100;\r\ncontrols.anchorSpeed    =  .1;\r\ncontrols.staticLength   = 100;\r\n\r\n\r\n// Adding meshes to the Anchor , Target and Hand\r\nvar geo = new THREE.IcosahedronGeometry( 5, 2 ); \r\nvar mat = new THREE.MeshNormalMaterial(); \r\n\r\nvar targetMesh  = new THREE.Mesh( geo , mat );\r\nvar anchorMesh  = new THREE.Mesh( geo , mat );\r\nvar handMesh    = new THREE.Mesh( geo , mat );\r\n\r\ncontrols.addTargetMarker( targetMesh );\r\ncontrols.addAnchorMarker( anchorMesh );\r\ncontrols.addHandMarker(     handMesh );\r\n\r\n// Inside Animate Function\r\ncontrols.update();\r\n```\r\n\r\nUsing the following parameters:\r\n\r\n  - dampening:      Tells us how quickly movement slows down \r\n  - size:           Tells us size of hand movements\r\n  - springConstant: Tells us value for Hooke's Law constant k\r\n  - mass:           Tells us mass of camera\r\n  - anchorSpeed:    Tells us how fast Anchor tweens to target \r\n                    ( .5 and higher gets weird. but it shouldn't,\r\n                      I just forgot how to do physics. Pull request maybe ?!!???!? )\r\n  - staticLength:   Tells us how far away camera comes to rest from target\r\n\r\n\r\nTrackball Controls\r\n-----\r\n\r\nTrackball Controls let you swipe the camera around a target, as if you\r\nwere pushing a giant bowling ball around ( your hand is always behind the ball )\r\nAlso , if you turn your hand straight up, and zoom is enabled, you will\r\nstop spinning and start zooming, based on moving your hand forward and backwards\r\n\r\n\r\nPros:\r\n\r\n  - Supersmooth. \r\n  - No Gimbal Lock!\r\n  - No use of Pinch! \r\n\r\nCons:\r\n\r\n  - Only moves around single point\r\n  - Controls take some getting used to for some people\r\n  - No clear up vector, which leads to possible deorientation\r\n\r\nPairings:\r\n  \r\n  - 3D Modeling camera controls\r\n  - A quick addition to visual experiments\r\n\r\n\r\nCalled using: \r\n\r\n```\r\n<!-- Include Script -->\r\n<script src=\"path/to/controls/LeapTrackballControls.js\"></script>\r\n\r\n// Inside Init Function\r\nvar controls = THREE.LeapTrackballControls( camera , controller );\r\n\r\ncontrols.rotationSpeed            =   10;\r\ncontrols.rotationLowDampening     =  .98;\r\ncontrols.rotationHighDampening    =   .7;\r\ncontrols.zoom                     =   40;\r\ncontrols.zoomDampening            =   .6;\r\ncontrols.zoomSpeedRatio           =   10;\r\ncontrols.zoomCutoff               =   .9;\r\ncontrols.zoomEnabled              = true;\r\ncontrols.minZoom                  =   20;\r\ncontrols.maxZoom                  =   80;\r\n \r\n// Inside Animate Function\r\ncontrols.update();\r\n```\r\n\r\nUsing the following parameters:\r\n\r\n  - rotationSpeed:          Tells us the speed of the rotation\r\n  - rotationLowDampening:   Tells us how quickly the rotation will slow down when in moving state\r\n  - rotationHighDampening:  Tells us how quickly the rotation will slow down when in stopping state\r\n  - zoomEnabled:            Tells us if zooming is enabled\r\n  - zoom:                   Tells us how close we are to the center\r\n  - zoomDampening:          Tells us how quickly the zoom will slow down\r\n  - zoomSpeedRatio:         Tells us how quickly the zoom moves compared to palm\r\n  - zoomCutoff:             Tells us how forward facing our palm needs to be to zoom\r\n  - minZoom:                Tells us the closest we can be\r\n  - maxZoom:                Tells us the farthest we can be\r\n  \r\n\r\nPinch Rotate Controls\r\n-----\r\n\r\nPinch Rotate Controls are nearly Identical to the Trackball controls, except that they use pinch in order to move the camera. As well, they have the ability to zoom in and out, by simply pinching and moving inwards or outwards. In order to define when this happens, it looks at the movement in Z vs the movement in X and Y, and compares the too to see if there is more movement in Z than XY or vis versa\r\n\r\nPros:\r\n\r\n  - Supersmooth. \r\n  - No Gimbal Lock!\r\n\r\nCons:\r\n\r\n  - Only moves around single point\r\n  - Controls take some getting used to for some people\r\n  - No clear up vector, which leads to possible deorientation\r\n  - Uses Pinch :-( \r\n\r\nPairings:\r\n  \r\n  - 3D Modeling camera controls\r\n  - A quick addition to visual experiments\r\n\r\n\r\nCalled using: \r\n\r\n```\r\n<!-- Include Script -->\r\n<script src=\"path/to/controls/LeapPinchRotateControls.js\"></script>\r\n\r\n// Inside Init Function\r\nvar controls = THREE.LeapPinchRotateControls( camera , controller );\r\n\r\ncontrols.rotationSpeed            =   10;\r\ncontrols.rotationLowDampening     =  .98;\r\ncontrols.rotationHighDampening    =   .7;\r\ncontrols.zoom                     =   40;\r\ncontrols.zoomDampening            =   .6;\r\ncontrols.zoomSpeedRatio           =   10;\r\ncontrols.zoomCutoff               =   .9;\r\ncontrols.zoomEnabled              = true;\r\ncontrols.zoomVsRotate             =    1;\r\ncontrols.minZoom                  =   20;\r\ncontrols.maxZoom                  =   80;\r\n \r\n// Inside Animate Function\r\ncontrols.update();\r\n```\r\n\r\nUsing the following parameters:\r\n\r\n  - rotationSpeed:          Tells us the speed of the rotation\r\n  - rotationLowDampening:   Tells us how quickly the rotation will slow down when in moving state\r\n  - rotationHighDampening:  Tells us how quickly the rotation will slow down when in stopping state\r\n  - zoomEnabled:            Tells us if zooming is enabled\r\n  - zoom:                   Tells us how close we are to the center\r\n  - zoomDampening:          Tells us how quickly the zoom will slow down\r\n  - zoomSpeedRatio:         Tells us how quickly the zoom moves compared to palm\r\n  - zoomCutoff:             Tells us how forward facing our palm needs to be to zoom\r\n  - zoomVsRotate:           Tells us how much more we need to be moving in Z than XY to start zooming, vs rotating\r\n  - minZoom:                Tells us the closest we can be\r\n  - maxZoom:                Tells us the farthest we can be\r\n\r\n\r\n\r\nPaddle Controls\r\n-----\r\n\r\nPaddle Controls Let you 'Paddle' Around a scene, the way that you would paddle \r\nthrough water. Pretty cool huh?\r\n\r\nPros:\r\n\r\n  - Supersmooth. \r\n  - Makes you feel a bit like a god\r\n  - No Gimbal Lock!\r\n  - No Pinch!\r\n\r\nCons:\r\n\r\n  - No Rotate...\r\n  - Controls take some getting used to for some people\r\n  \r\n\r\nPairings:\r\n  \r\n  - Great for moving a scene where you want don't want to rotate\r\n  - Great for 'infinite' terrains\r\n  - Great to combine with other methods of control!\r\n\r\nCalled using: \r\n\r\n```\r\n<!-- Include Script -->\r\n<script src=\"path/to/controls/LeapPaddleControls.js\"></script>\r\n\r\n// Inside Init Function\r\nvar controls = THREE.LeapPaddleControls( camera , controller );\r\n\r\ncontrols.weakDampening        = .99;\r\ncontrols.strongDampening      = .9;\r\ncontrols.fingerMatchCutoff    = .5;\r\ncontrols.velocityMatchCutoff  =.5;\r\ncontrols.fingerMatchPower     = 5;\r\ncontrols.velocityMatchPower   = 5;\r\ncontrols.movementSpeed        = 1;\r\ncontrols.maxSpeed             = 10; \r\n\r\n\r\n// Inside Animate Function\r\ncontrols.update();\r\n```\r\n\r\nUsing the following parameters:\r\n\r\n  - weakDampening:          Tells us dampening when there is a hand in field\r\n  - strongDampening:        Tells us dampening when there is no hand in field\r\n  - fingerMatchCutoff:      Tells us the number at which we will stop moving if the finger direction does not match the hand direction\r\n  - velocityMatchCutoff:    Tells us the number at which we will stop moving if the finger velocity does not match the hand normal\r\n  - fingerMatchPower:       Tells us the amount that the fingerMatch will be raised to to give a higher or lower turn on for movement\r\n  - velocityMatchPower:     Tells us the amount that the velocityMatch will be raised to to give a higher or lower turn on for movement\r\n  - movementSpeed:          Tells us how fast we are moving, by multiplying the force\r\n  - maxSpeed:               Tells us what we will limit the cameras speed to\r\n\r\n\r\nTwo Hand Controls\r\n-----\r\n\r\nTwo Hand controls let you translate around a scene by pinching with a single\r\nhand, and rotate scene when you pinch with two hands\r\n\r\nPros:\r\n\r\n  - You feel a bit like iron man\r\n  - You don't accidentally rotate the scene when you don't want to \r\n  - Once you let go, gives slowly brings you to a final resting point\r\n  \r\n\r\nCons:\r\n\r\n  - Sometimes difficult for tracking to pick up with two hands in the field\r\n  - Uses pinch, which removes the ability to use it for other gestures\r\n  - Using two hands might be more tiring\r\n\r\n\r\nPairings:\r\n  \r\n  - Quickly exploring large swatches of land\r\n  - Manipulating large scenes\r\n  - A quick addition to visual experiments\r\n\r\n\r\nCalled using: \r\n\r\n```\r\n<!-- Include Script -->\r\n<script src=\"path/to/controls/LeapEyeLookControls.js\"></script>\r\n\r\n// Inside Init Function\r\ncontrols = new THREE.LeapTwoHandControls( camera , controller , scene );\r\n\r\ncontrols.translationSpeed   = 20;\r\ncontrols.translationDecay   = 0.3;\r\ncontrols.scaleDecay         = 0.5;\r\ncontrols.rotationSlerp      = 0.8;\r\ncontrols.rotationSpeed      = 4;\r\ncontrols.pinchThreshold     = 0.5;\r\ncontrols.transSmoothing     = 0.5;\r\ncontrols.rotationSmoothing  = 0.2;\r\n\r\n// Inside Animate Function\r\ncontrols.update();\r\n```\r\n\r\nTODO: Description of Parameters\r\n\r\n\r\n\r\nFirst Person Controls\r\n-----\r\n\r\nTODO\r\n\r\n\r\nWhat You can Do To Help\r\n=======\r\n\r\n  - Let me know about comments / suggestions / complaints etc via issues\r\n  - Contribute your own controls via a pull request\r\n  - Tell your friends, and get more people user testing / involved!\r\n",
  "google": "UA-71523727-6",
  "note": "Don't delete this file! It's used internally to help with page regeneration."
}